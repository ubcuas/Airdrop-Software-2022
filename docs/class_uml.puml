@startuml

class ManualControlMode {

}

class AutoMode{

}

class LowPowerMode {

}

StateMachine *-- State

class StateMachine {


}

class Controller {
  - Motor left_motor
  - Motor right_motor
  + std::pair MotorController(int throttle, int turn_angle)
  + int HeadingPIDController(int heading)
  + std::pair RCController()
}

enum State {
  LPM
  DROP
  LANDED
  AUTO
  MANUAL
  TERMINATE
}


abstract class Sensor {
 +String sensor_name
 +bool connected
 {abstract} bool CheckConnection()
 {abstract} void Attach()
 {abstract} void Update()
 {abstract} bool Calibrate()
 {abstract} bool Stop()
}

abstract class Acuator {
 +String acuator_name
 -bool connected
 {abstract} bool CheckConnection()
 {abstract} bool Attach() 
 {abstract} bool ChangeInput(int input)
}

RCReceiver *-- PWMReceiver

class RCReceiver {
  - PWMReceiver throttle
  - PWMReceiver yaw
  + int ReadThrottle()
  + int ReadYaw()
}
class PWMReceiver implements Sensor{
  -int pwm_value
  +int ReadRCValue()
}

class PPMReceiver implements Sensor{
  -int throttle_channel
  -int yaw_channel
  +int ReadThrottle()
  +int ReadYaw()
}

class BNO055 implements Sensor{
  -int current_heading
  +int GetHeading()
}

class GPS implements Sensor{
  - TinyGPSPlus gps
  - GPSCoordinate current_gps
  + void WaitForGPSConnection()
  + GPSCoordinate GetCurrentGPSCoordinate()
}
GPS "1" o-- GPSCoordinate

class GPSCoordinate {
  - double latitude
  - double longtitude
  + GPS(double lat, double longi)
  + double GetDistanceTo(GPS dest)
  + double GetHeadingTo(GPS dest)
  + {static} double GetDistanceBetween(GPS source, GPS dest)
  + {static} double GetHeadingBetween(GPS source, GPS dest)
}

class Altimeter implements Sensor{
  - double current_altitude
  + double GetCurrentAltitude()
}

class Motor implements Acuator{
  - bool direction
  - double current_speed
  - void ReverseMotor()
}

class Encoder implements Sensor{

}

class Servo implements Acuator{
  - int current_angle
  + int GetCurrentAngle()
}


@enduml